#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="InventoryMgtSys")]
	public partial class InventoryManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertProductsDetail(ProductsDetail instance);
    partial void UpdateProductsDetail(ProductsDetail instance);
    partial void DeleteProductsDetail(ProductsDetail instance);
    partial void InsertProductType(ProductType instance);
    partial void UpdateProductType(ProductType instance);
    partial void DeleteProductType(ProductType instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSaleDetail(SaleDetail instance);
    partial void UpdateSaleDetail(SaleDetail instance);
    partial void DeleteSaleDetail(SaleDetail instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    partial void InsertBalanceInfo(BalanceInfo instance);
    partial void UpdateBalanceInfo(BalanceInfo instance);
    partial void DeleteBalanceInfo(BalanceInfo instance);
    partial void InsertProductHistory(ProductHistory instance);
    partial void UpdateProductHistory(ProductHistory instance);
    partial void DeleteProductHistory(ProductHistory instance);
    #endregion
		
		public InventoryManagementDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.InventoryMgtSysConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<ProductsDetail> ProductsDetails
		{
			get
			{
				return this.GetTable<ProductsDetail>();
			}
		}
		
		public System.Data.Linq.Table<ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<ProductType>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<SaleDetail> SaleDetails
		{
			get
			{
				return this.GetTable<SaleDetail>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
		
		public System.Data.Linq.Table<BalanceInfo> BalanceInfos
		{
			get
			{
				return this.GetTable<BalanceInfo>();
			}
		}
		
		public System.Data.Linq.Table<ProductHistory> ProductHistories
		{
			get
			{
				return this.GetTable<ProductHistory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _CustomerName;
		
		private string _FareName;
		
		private System.Nullable<bool> _isDeleted;
		
		private EntitySet<Sale> _Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnFareNameChanging(string value);
    partial void OnFareNameChanged();
    partial void OnisDeletedChanging(System.Nullable<bool> value);
    partial void OnisDeletedChanged();
    #endregion
		
		public Customer()
		{
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(50)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FareName", DbType="NVarChar(50)")]
		public string FareName
		{
			get
			{
				return this._FareName;
			}
			set
			{
				if ((this._FareName != value))
				{
					this.OnFareNameChanging(value);
					this.SendPropertyChanging();
					this._FareName = value;
					this.SendPropertyChanged("FareName");
					this.OnFareNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDeleted")]
		public System.Nullable<bool> isDeleted
		{
			get
			{
				return this._isDeleted;
			}
			set
			{
				if ((this._isDeleted != value))
				{
					this.OnisDeletedChanging(value);
					this.SendPropertyChanging();
					this._isDeleted = value;
					this.SendPropertyChanged("isDeleted");
					this.OnisDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Sales", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductsDetails")]
	public partial class ProductsDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PDetailID;
		
		private System.Nullable<int> _ProductID;
		
		private string _MfgDate;
		
		private string _ExpiryDate;
		
		private System.Nullable<int> _NoOfProducts;
		
		private System.Nullable<int> _PurchasePrice;
		
		private System.Nullable<int> _SellingPrice;
		
		private System.Nullable<System.DateTime> _DateOfAdding;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPDetailIDChanging(int value);
    partial void OnPDetailIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnMfgDateChanging(string value);
    partial void OnMfgDateChanged();
    partial void OnExpiryDateChanging(string value);
    partial void OnExpiryDateChanged();
    partial void OnNoOfProductsChanging(System.Nullable<int> value);
    partial void OnNoOfProductsChanged();
    partial void OnPurchasePriceChanging(System.Nullable<int> value);
    partial void OnPurchasePriceChanged();
    partial void OnSellingPriceChanging(System.Nullable<int> value);
    partial void OnSellingPriceChanged();
    partial void OnDateOfAddingChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAddingChanged();
    #endregion
		
		public ProductsDetail()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PDetailID
		{
			get
			{
				return this._PDetailID;
			}
			set
			{
				if ((this._PDetailID != value))
				{
					this.OnPDetailIDChanging(value);
					this.SendPropertyChanging();
					this._PDetailID = value;
					this.SendPropertyChanged("PDetailID");
					this.OnPDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgDate", DbType="NVarChar(50)")]
		public string MfgDate
		{
			get
			{
				return this._MfgDate;
			}
			set
			{
				if ((this._MfgDate != value))
				{
					this.OnMfgDateChanging(value);
					this.SendPropertyChanging();
					this._MfgDate = value;
					this.SendPropertyChanged("MfgDate");
					this.OnMfgDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="NVarChar(50)")]
		public string ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfProducts", DbType="Int")]
		public System.Nullable<int> NoOfProducts
		{
			get
			{
				return this._NoOfProducts;
			}
			set
			{
				if ((this._NoOfProducts != value))
				{
					this.OnNoOfProductsChanging(value);
					this.SendPropertyChanging();
					this._NoOfProducts = value;
					this.SendPropertyChanged("NoOfProducts");
					this.OnNoOfProductsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Int")]
		public System.Nullable<int> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Int")]
		public System.Nullable<int> SellingPrice
		{
			get
			{
				return this._SellingPrice;
			}
			set
			{
				if ((this._SellingPrice != value))
				{
					this.OnSellingPriceChanging(value);
					this.SendPropertyChanging();
					this._SellingPrice = value;
					this.SendPropertyChanged("SellingPrice");
					this.OnSellingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdding", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAdding
		{
			get
			{
				return this._DateOfAdding;
			}
			set
			{
				if ((this._DateOfAdding != value))
				{
					this.OnDateOfAddingChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdding = value;
					this.SendPropertyChanged("DateOfAdding");
					this.OnDateOfAddingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductsDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductsDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductsDetails.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductType")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductTypeID;
		
		private string _PType;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<ProductHistory> _ProductHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductTypeIDChanging(int value);
    partial void OnProductTypeIDChanged();
    partial void OnPTypeChanging(string value);
    partial void OnPTypeChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ProductType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._ProductHistories = new EntitySet<ProductHistory>(new Action<ProductHistory>(this.attach_ProductHistories), new Action<ProductHistory>(this.detach_ProductHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PType", DbType="NVarChar(50)")]
		public string PType
		{
			get
			{
				return this._PType;
			}
			set
			{
				if ((this._PType != value))
				{
					this.OnPTypeChanging(value);
					this.SendPropertyChanging();
					this._PType = value;
					this.SendPropertyChanged("PType");
					this.OnPTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_Products", ThisKey="ProductTypeID", OtherKey="ProductTypeID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_ProductHistory", Storage="_ProductHistories", ThisKey="ProductTypeID", OtherKey="ProductTypeID")]
		public EntitySet<ProductHistory> ProductHistories
		{
			get
			{
				return this._ProductHistories;
			}
			set
			{
				this._ProductHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
		
		private void attach_ProductHistories(ProductHistory entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_ProductHistories(ProductHistory entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _ProductTypeID;
		
		private string _ProductName;
		
		private string _ManufacturedBy;
		
		private System.Nullable<System.DateTime> _MfgDate;
		
		private System.Nullable<System.DateTime> _ExpiryDate;
		
		private System.Nullable<int> _PurchasePrice;
		
		private System.Nullable<int> _SellingPrice;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<int> _NumberOfItems;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<ProductsDetail> _ProductsDetails;
		
		private EntitySet<SaleDetail> _SaleDetails;
		
		private EntitySet<ProductHistory> _ProductHistories;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductTypeIDChanging(int value);
    partial void OnProductTypeIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnManufacturedByChanging(string value);
    partial void OnManufacturedByChanged();
    partial void OnMfgDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMfgDateChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnPurchasePriceChanging(System.Nullable<int> value);
    partial void OnPurchasePriceChanged();
    partial void OnSellingPriceChanging(System.Nullable<int> value);
    partial void OnSellingPriceChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnNumberOfItemsChanging(System.Nullable<int> value);
    partial void OnNumberOfItemsChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Product()
		{
			this._ProductsDetails = new EntitySet<ProductsDetail>(new Action<ProductsDetail>(this.attach_ProductsDetails), new Action<ProductsDetail>(this.detach_ProductsDetails));
			this._SaleDetails = new EntitySet<SaleDetail>(new Action<SaleDetail>(this.attach_SaleDetails), new Action<SaleDetail>(this.detach_SaleDetails));
			this._ProductHistories = new EntitySet<ProductHistory>(new Action<ProductHistory>(this.attach_ProductHistories), new Action<ProductHistory>(this.detach_ProductHistories));
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeID", DbType="Int")]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(50)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturedBy", DbType="NVarChar(50)")]
		public string ManufacturedBy
		{
			get
			{
				return this._ManufacturedBy;
			}
			set
			{
				if ((this._ManufacturedBy != value))
				{
					this.OnManufacturedByChanging(value);
					this.SendPropertyChanging();
					this._ManufacturedBy = value;
					this.SendPropertyChanged("ManufacturedBy");
					this.OnManufacturedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgDate", DbType="Date")]
		public System.Nullable<System.DateTime> MfgDate
		{
			get
			{
				return this._MfgDate;
			}
			set
			{
				if ((this._MfgDate != value))
				{
					this.OnMfgDateChanging(value);
					this.SendPropertyChanging();
					this._MfgDate = value;
					this.SendPropertyChanged("MfgDate");
					this.OnMfgDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Int")]
		public System.Nullable<int> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Int")]
		public System.Nullable<int> SellingPrice
		{
			get
			{
				return this._SellingPrice;
			}
			set
			{
				if ((this._SellingPrice != value))
				{
					this.OnSellingPriceChanging(value);
					this.SendPropertyChanging();
					this._SellingPrice = value;
					this.SendPropertyChanged("SellingPrice");
					this.OnSellingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfItems", DbType="Int")]
		public System.Nullable<int> NumberOfItems
		{
			get
			{
				return this._NumberOfItems;
			}
			set
			{
				if ((this._NumberOfItems != value))
				{
					this.OnNumberOfItemsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfItems = value;
					this.SendPropertyChanged("NumberOfItems");
					this.OnNumberOfItemsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductsDetail", Storage="_ProductsDetails", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductsDetail> ProductsDetails
		{
			get
			{
				return this._ProductsDetails;
			}
			set
			{
				this._ProductsDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SaleDetail", Storage="_SaleDetails", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<SaleDetail> SaleDetails
		{
			get
			{
				return this._SaleDetails;
			}
			set
			{
				this._SaleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductHistory", Storage="_ProductHistories", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductHistory> ProductHistories
		{
			get
			{
				return this._ProductHistories;
			}
			set
			{
				this._ProductHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_ProductType", ThisKey="ProductTypeID", OtherKey="ProductTypeID", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ProductTypeID = value.ProductTypeID;
					}
					else
					{
						this._ProductTypeID = default(int);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductsDetails(ProductsDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductsDetails(ProductsDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductHistories(ProductHistory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductHistories(ProductHistory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SaleDetails")]
	public partial class SaleDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleDetailID;
		
		private long _SaleID;
		
		private int _ProductID;
		
		private System.Nullable<int> _PurchasePrice;
		
		private int _SalePrice;
		
		private System.Nullable<int> _Discount;
		
		private int _NoOfItems;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<System.DateTime> _SaleDate;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Sale> _Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleDetailIDChanging(int value);
    partial void OnSaleDetailIDChanged();
    partial void OnSaleIDChanging(long value);
    partial void OnSaleIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnPurchasePriceChanging(System.Nullable<int> value);
    partial void OnPurchasePriceChanged();
    partial void OnSalePriceChanging(int value);
    partial void OnSalePriceChanged();
    partial void OnDiscountChanging(System.Nullable<int> value);
    partial void OnDiscountChanged();
    partial void OnNoOfItemsChanging(int value);
    partial void OnNoOfItemsChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnSaleDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSaleDateChanged();
    #endregion
		
		public SaleDetail()
		{
			this._Product = default(EntityRef<Product>);
			this._Sale = default(EntityRef<Sale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SaleDetailID
		{
			get
			{
				return this._SaleDetailID;
			}
			set
			{
				if ((this._SaleDetailID != value))
				{
					this.OnSaleDetailIDChanging(value);
					this.SendPropertyChanging();
					this._SaleDetailID = value;
					this.SendPropertyChanged("SaleDetailID");
					this.OnSaleDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", DbType="BigInt NOT NULL")]
		public long SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Int")]
		public System.Nullable<int> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePrice", DbType="Int NOT NULL")]
		public int SalePrice
		{
			get
			{
				return this._SalePrice;
			}
			set
			{
				if ((this._SalePrice != value))
				{
					this.OnSalePriceChanging(value);
					this.SendPropertyChanging();
					this._SalePrice = value;
					this.SendPropertyChanged("SalePrice");
					this.OnSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int")]
		public System.Nullable<int> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfItems", DbType="Int NOT NULL")]
		public int NoOfItems
		{
			get
			{
				return this._NoOfItems;
			}
			set
			{
				if ((this._NoOfItems != value))
				{
					this.OnNoOfItemsChanging(value);
					this.SendPropertyChanging();
					this._NoOfItems = value;
					this.SendPropertyChanged("NoOfItems");
					this.OnNoOfItemsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SaleDate
		{
			get
			{
				return this._SaleDate;
			}
			set
			{
				if ((this._SaleDate != value))
				{
					this.OnSaleDateChanging(value);
					this.SendPropertyChanging();
					this._SaleDate = value;
					this.SendPropertyChanged("SaleDate");
					this.OnSaleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SaleDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SaleDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SaleDetails.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SaleDetail", Storage="_Sale", ThisKey="SaleID", OtherKey="SaleID", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.SaleDetails.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.SaleDetails.Add(this);
						this._SaleID = value.SaleID;
					}
					else
					{
						this._SaleID = default(long);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sales")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SaleID;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<System.DateTime> _SaleStartDate;
		
		private System.Nullable<int> _AmountRecieved;
		
		private System.Nullable<System.DateTime> _LastRecievedDate;
		
		private EntitySet<SaleDetail> _SaleDetails;
		
		private EntitySet<BalanceInfo> _BalanceInfos;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleIDChanging(long value);
    partial void OnSaleIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnSaleStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSaleStartDateChanged();
    partial void OnAmountRecievedChanging(System.Nullable<int> value);
    partial void OnAmountRecievedChanged();
    partial void OnLastRecievedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastRecievedDateChanged();
    #endregion
		
		public Sale()
		{
			this._SaleDetails = new EntitySet<SaleDetail>(new Action<SaleDetail>(this.attach_SaleDetails), new Action<SaleDetail>(this.detach_SaleDetails));
			this._BalanceInfos = new EntitySet<BalanceInfo>(new Action<BalanceInfo>(this.attach_BalanceInfos), new Action<BalanceInfo>(this.detach_BalanceInfos));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SaleStartDate
		{
			get
			{
				return this._SaleStartDate;
			}
			set
			{
				if ((this._SaleStartDate != value))
				{
					this.OnSaleStartDateChanging(value);
					this.SendPropertyChanging();
					this._SaleStartDate = value;
					this.SendPropertyChanged("SaleStartDate");
					this.OnSaleStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountRecieved", DbType="Int")]
		public System.Nullable<int> AmountRecieved
		{
			get
			{
				return this._AmountRecieved;
			}
			set
			{
				if ((this._AmountRecieved != value))
				{
					this.OnAmountRecievedChanging(value);
					this.SendPropertyChanging();
					this._AmountRecieved = value;
					this.SendPropertyChanged("AmountRecieved");
					this.OnAmountRecievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRecievedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastRecievedDate
		{
			get
			{
				return this._LastRecievedDate;
			}
			set
			{
				if ((this._LastRecievedDate != value))
				{
					this.OnLastRecievedDateChanging(value);
					this.SendPropertyChanging();
					this._LastRecievedDate = value;
					this.SendPropertyChanged("LastRecievedDate");
					this.OnLastRecievedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SaleDetail", Storage="_SaleDetails", ThisKey="SaleID", OtherKey="SaleID")]
		public EntitySet<SaleDetail> SaleDetails
		{
			get
			{
				return this._SaleDetails;
			}
			set
			{
				this._SaleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_BalanceInfo", Storage="_BalanceInfos", ThisKey="SaleID", OtherKey="SaleID")]
		public EntitySet<BalanceInfo> BalanceInfos
		{
			get
			{
				return this._BalanceInfos;
			}
			set
			{
				this._BalanceInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
		
		private void attach_BalanceInfos(BalanceInfo entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_BalanceInfos(BalanceInfo entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BalanceInfo")]
	public partial class BalanceInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BalanceID;
		
		private int _CusomerID;
		
		private System.Nullable<long> _SaleID;
		
		private int _AmountRecieved;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private EntityRef<Sale> _Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBalanceIDChanging(int value);
    partial void OnBalanceIDChanged();
    partial void OnCusomerIDChanging(int value);
    partial void OnCusomerIDChanged();
    partial void OnSaleIDChanging(System.Nullable<long> value);
    partial void OnSaleIDChanged();
    partial void OnAmountRecievedChanging(int value);
    partial void OnAmountRecievedChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    #endregion
		
		public BalanceInfo()
		{
			this._Sale = default(EntityRef<Sale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BalanceID
		{
			get
			{
				return this._BalanceID;
			}
			set
			{
				if ((this._BalanceID != value))
				{
					this.OnBalanceIDChanging(value);
					this.SendPropertyChanging();
					this._BalanceID = value;
					this.SendPropertyChanged("BalanceID");
					this.OnBalanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CusomerID", DbType="Int NOT NULL")]
		public int CusomerID
		{
			get
			{
				return this._CusomerID;
			}
			set
			{
				if ((this._CusomerID != value))
				{
					this.OnCusomerIDChanging(value);
					this.SendPropertyChanging();
					this._CusomerID = value;
					this.SendPropertyChanged("CusomerID");
					this.OnCusomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", DbType="BigInt")]
		public System.Nullable<long> SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountRecieved", DbType="Int NOT NULL")]
		public int AmountRecieved
		{
			get
			{
				return this._AmountRecieved;
			}
			set
			{
				if ((this._AmountRecieved != value))
				{
					this.OnAmountRecievedChanging(value);
					this.SendPropertyChanging();
					this._AmountRecieved = value;
					this.SendPropertyChanged("AmountRecieved");
					this.OnAmountRecievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_BalanceInfo", Storage="_Sale", ThisKey="SaleID", OtherKey="SaleID", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.BalanceInfos.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.BalanceInfos.Add(this);
						this._SaleID = value.SaleID;
					}
					else
					{
						this._SaleID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductHistory")]
	public partial class ProductHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ProductID;
		
		private int _ProductTypeID;
		
		private string _ProductName;
		
		private string _ManufacturedBy;
		
		private System.Nullable<System.DateTime> _MfgDate;
		
		private System.Nullable<System.DateTime> _ExpiryDate;
		
		private System.Nullable<int> _PurchasePrice;
		
		private System.Nullable<int> _SellingPrice;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnProductTypeIDChanging(int value);
    partial void OnProductTypeIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnManufacturedByChanging(string value);
    partial void OnManufacturedByChanged();
    partial void OnMfgDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMfgDateChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnPurchasePriceChanging(System.Nullable<int> value);
    partial void OnPurchasePriceChanged();
    partial void OnSellingPriceChanging(System.Nullable<int> value);
    partial void OnSellingPriceChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    #endregion
		
		public ProductHistory()
		{
			this._Product = default(EntityRef<Product>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeID", DbType="Int NOT NULL")]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturedBy", DbType="NVarChar(50)")]
		public string ManufacturedBy
		{
			get
			{
				return this._ManufacturedBy;
			}
			set
			{
				if ((this._ManufacturedBy != value))
				{
					this.OnManufacturedByChanging(value);
					this.SendPropertyChanging();
					this._ManufacturedBy = value;
					this.SendPropertyChanged("ManufacturedBy");
					this.OnManufacturedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgDate", DbType="Date")]
		public System.Nullable<System.DateTime> MfgDate
		{
			get
			{
				return this._MfgDate;
			}
			set
			{
				if ((this._MfgDate != value))
				{
					this.OnMfgDateChanging(value);
					this.SendPropertyChanging();
					this._MfgDate = value;
					this.SendPropertyChanged("MfgDate");
					this.OnMfgDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Int")]
		public System.Nullable<int> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Int")]
		public System.Nullable<int> SellingPrice
		{
			get
			{
				return this._SellingPrice;
			}
			set
			{
				if ((this._SellingPrice != value))
				{
					this.OnSellingPriceChanging(value);
					this.SendPropertyChanging();
					this._SellingPrice = value;
					this.SendPropertyChanged("SellingPrice");
					this.OnSellingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductHistory", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductHistories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductHistories.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_ProductHistory", Storage="_ProductType", ThisKey="ProductTypeID", OtherKey="ProductTypeID", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.ProductHistories.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.ProductHistories.Add(this);
						this._ProductTypeID = value.ProductTypeID;
					}
					else
					{
						this._ProductTypeID = default(int);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
